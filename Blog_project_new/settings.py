"""
Django settings for Blog_project_new project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url # <<< THIS LINE MUST BE ADDED


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# <<< CRITICAL CHANGE 1: This MUST load from an environment variable in production.
# You MUST set a 'SECRET_KEY' environment variable in your Railway service's Variables tab.
SECRET_KEY = os.environ.get('SECRET_KEY')
if not SECRET_KEY:
    # This check ensures it's set. For local development, you might remove this
    # or load from a .env file (e.g., using python-dotenv).
    raise Exception("SECRET_KEY environment variable not set! This is required in production.")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False # <<< CORRECT: DEBUG should be False for production


ALLOWED_HOSTS = ["*"] # Consider restricting this in final production for security


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog_app',
    'rest_framework',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # <<< CORRECT: Casing is 'whitenoise', already fixed!
]

ROOT_URLCONF = 'Blog_project_new.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Blog_project_new.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# <<< CRITICAL CHANGE 2: Database Configuration for Railway Production
# Railway injects a DATABASE_URL environment variable for your linked PostgreSQL service.
# Use dj_database_url to parse it automatically.
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL', 'sqlite:///db.sqlite3'), # Fallback for local dev if no DATABASE_URL is set
        conn_max_age=600 # Optional: for persistent connections
    )
}
# <<< REMOVE ALL OF THESE LINES BELOW THIS POINT (from your original settings.py):
# os.environ.setdefault("PGDATABASE", "blog_db")
# os.environ.setdefault("PGUSER", "postgres")
# os.environ.setdefault("PGPASSWORD", "Gouse@1725")
# os.environ.setdefault("PGHOST", "localhost")
# os.environ.setdefault("PGPORT", "5432")
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ["PGDATABASE"],
#         'USER': os.environ["PGUSER"],
#         'PASSWORD': os.environ["PGPASSWORD"],
#         'HOST': os.environ["PGHOST"],
#         'PORT': os.environ["PGPORT"],
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# <<< CRITICAL CHANGE 3: Define STATIC_ROOT for collectstatic and WhiteNoise
# This is the directory where `python manage.py collectstatic` will gather all your static files.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# <<< CRITICAL CHANGE 4: WhiteNoise Storage for Django 4.x+ (Recommended)
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


CORS_ALLOW_ALL_ORIGINS = True


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# NOTE FOR MEDIA FILES: For production, BASE_DIR / 'media' is not persistent on Railway.
# User-uploaded media files will be lost if your container restarts.
# For a production application, you will eventually need to configure cloud storage
# (e.g., AWS S3, Google Cloud Storage, or Railway Volumes for persistent storage).